/*
 * Copyright (c) 2017, NXP Semiconductor, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of NXP Semiconductor, Inc. nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
/**
 * @file    SPI_LCD_NOKIA.c
 * @brief   Application entry point.
 */
#include <stdio.h>
#include "board.h"
#include "peripherals.h"
#include "pin_mux.h"
#include "clock_config.h"
#include "MK64F12.h"
#include "fsl_debug_console.h"
#include "fsl_dspi.h"
#include "fsl_port.h"
#define BUFFER_LEN (64)


volatile bool isFinished = false;

void SPI_UserCallback(SPI_Type *base, dspi_master_handle_t *handle, status_t status, void *userData)
{
	isFinished = true;
}

int main(void) {

  	/* Init board hardware. */
    BOARD_InitBootPins();
    BOARD_InitBootClocks();
    BOARD_InitBootPeripherals();
  	/* Init FSL debug console. */
    BOARD_InitDebugConsole();
    CLOCK_EnableClock(kCLOCK_PortD);
    CLOCK_EnableClock(kCLOCK_Spi0);

    port_pin_config_t config_spi =
        	{ kPORT_PullDisable, kPORT_SlowSlewRate, kPORT_PassiveFilterDisable,
        	  kPORT_OpenDrainDisable, kPORT_LowDriveStrength, kPORT_MuxAlt2,
        	  kPORT_UnlockRegister, };

    PORT_SetPinConfig(PORTD, 0, &config_spi);
    PORT_SetPinConfig(PORTD, 1, &config_spi);
    PORT_SetPinConfig(PORTD, 2, &config_spi);
    PORT_SetPinConfig(PORTD, 3, &config_spi);


    uint8_t sendData[BUFFER_LEN] = "......";
    uint8_t receiveBuff[BUFFER_LEN];

    ///////////////////////////////////////////////////////////////////////////////////
    dspi_master_config_t masterConfig;
    DSPI_MasterGetDefaultConfig(&masterConfig);
    DSPI_MasterInit(SPI0, &masterConfig, CLOCK_GetFreq(kCLOCK_BusClk));

    dspi_master_handle_t spi_m_handle;

    DSPI_MasterTransferCreateHandle(SPI0, &spi_m_handle, SPI_UserCallback, NULL);

    dspi_transfer_t spi_master_xfer;



    // Prepare to send.

    spi_master_xfer.txData = sendData;
    spi_master_xfer.rxData = receiveBuff;
    spi_master_xfer.dataSize = BUFFER_LEN;

    // Send out.
    DSPI_MasterTransferNonBlocking(SPI0, &spi_m_handle, &spi_master_xfer);
    // Wait send finished.
    while (!isFinished)
    {
    }
    // ...

    while(1) {

    }
    return 0 ;
}
