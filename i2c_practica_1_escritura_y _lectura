#include <stdio.h>
#include "board.h"
#include "peripherals.h"
#include "pin_mux.h"
#include "clock_config.h"
#include "MK64F12.h"
#include "fsl_debug_console.h"
#include "fsl_i2c.h"
#include "fsl_port.h"

/*#define buffer_size 32*/
/* TODO: insert other include files here. */

/* TODO: insert other definitions and declarations here. */

/*
 * @brief   Application entry point.
 */

/*i2c_master_handle_t g_m_handle;
volatile bool g_MasterCompletionFlag = false;
i2c_master_config_t masterConfig;
uint8_t status;
status_t result = kStatus_Success;
uint8_t txBuff[buffer_size];
i2c_master_transfer_t masterXfer;*/

volatile bool g_MasterCompletionFlag = false;

static void i2c_master_callback(I2C_Type *base, i2c_master_handle_t *handle,
		status_t status, void * userData)
{
	/* Signal transfer success when received success status.*/
	if (status == kStatus_Success)
	{
		g_MasterCompletionFlag = true;
	}
}

int main(void) {

  	/* Init board hardware. */
    BOARD_InitBootPins();
    BOARD_InitBootClocks();
    BOARD_InitBootPeripherals();
  	/* Init FSL debug console. */
    BOARD_InitDebugConsole();

    CLOCK_EnableClock(kCLOCK_PortB);
    CLOCK_EnableClock(kCLOCK_I2c0);

    port_pin_config_t config_i2c =
    	{ kPORT_PullDisable, kPORT_SlowSlewRate, kPORT_PassiveFilterDisable,
    	        kPORT_OpenDrainDisable, kPORT_LowDriveStrength, kPORT_MuxAlt5,
    	        kPORT_UnlockRegister, };

    PORT_SetPinConfig(PORTB, 2, &config_i2c);
    PORT_SetPinConfig(PORTB, 3, &config_i2c);

    /* Get default configuration for master.*/
    i2c_master_config_t masterConfig;
    I2C_MasterGetDefaultConfig(&masterConfig);

    masterConfig.baudRate_Bps = 100000;


    /* Init I2C master.*/
    I2C_MasterInit(I2C0, &masterConfig, CLOCK_GetFreq(kCLOCK_BusClk));
   i2c_master_handle_t g_m_handle;

   I2C_MasterTransferCreateHandle(I2C0, &g_m_handle,
		   i2c_master_callback, NULL);

   i2c_master_transfer_t masterXfer;

   uint8_t DATA = 0x0D;

    masterXfer.slaveAddress = 0x51;
    masterXfer.direction = kI2C_Write;
    masterXfer.subaddress = 0x0050;
    masterXfer.subaddressSize = 2;
    masterXfer.data = &DATA;
    masterXfer.dataSize = 1;
    masterXfer.flags = kI2C_TransferNoStopFlag;

    I2C_MasterTransferNonBlocking(I2C0, &g_m_handle, &masterXfer);
    /* Wait for transfer completed.*/

    while (!g_MasterCompletionFlag)
    {
    }
    g_MasterCompletionFlag = false;

    uint8_t read_data;

    masterXfer.slaveAddress = 0x51;
    masterXfer.direction = kI2C_Read;
    masterXfer.subaddress = 0x0050;
    masterXfer.subaddressSize = 2;
    masterXfer.data = &read_data;
    masterXfer.dataSize = 1;
    masterXfer.flags = kI2C_TransferRepeatedStartFlag;

    I2C_MasterTransferNonBlocking(I2C0, &g_m_handle,
    		&masterXfer);

    while (!g_MasterCompletionFlag)
    {
    }

    g_MasterCompletionFlag = false;



    while(1) {

    }
    return 0 ;
}
